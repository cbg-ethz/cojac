#!/usr/bin/env python3
import os
import argparse
import json
import yaml


# parse command line
argparser = argparse.ArgumentParser(
    description="print coloured pretty table on terminal",
    epilog="see cooc-pubmut for a CSV file that can be imported into an article",
)
inputgroup = argparser.add_mutually_exclusive_group(required=True)
inputgroup.add_argument(
    "-j",
    "--json",
    metavar="JSON",
    type=str,
    dest="json",
    help="results generated by mutbamscan",
)
inputgroup.add_argument(
    "-y",
    "--yaml",
    metavar="YAML",
    type=str,
    dest="yaml",
    help="results generated by mutbamscan",
)
args = argparser.parse_args()


# load table
table = {}

if args.json:
    assert os.path.isfile(args.json), f"cannot find result json file {args.json}"
    with open(args.json, "rt") as jf:
        table = json.load(fp=jf)
elif args.yaml:
    assert os.path.isfile(args.yaml), f"cannot find result json file {args.yaml}"
    with open(args.yaml, "rt") as yf:
        table = yaml.safe_load(yf)

assert len(table) > 0, "cannot succesfully load table"

# TODO generate instead of hardcodind

amplicon_nfo = {
    "76_IN1_IN3": "22917G,23012:C",
    "76_IN2": "22917G,22995A",
    "91_IN2": "27638C,27752T",
    "72_UK": "21765-21770Δ,21991-21993Δ",
    "78_UK": "23604A,23709T",
    "92_UK": "27972T,28048T,28111G",
    "93_UK": "28111G,28280-28280->CTA",
    "95_BR": "28877T,28878C",
    "71_BR": "21621A,21638T,21614T",
    "73_ZA": "22206G,22299T",
    "76_BR_ZA": "23012A,23063T",
    "77_EU": "23403G",
}


#
# pretty print
#

l = max(len(k) for k in table)
print(f"{'':<{l}} ", end="")
for a in amplicon_nfo:
    print(f" {a :<26}", end="")
print(f"\n{'':<{l}} ", end="")
for a, label in amplicon_nfo.items():
    print(f" {label :<26}", end="")
print(f"\n{'sample:':<{l}} ", end="")
for a in amplicon_nfo:
    print(f"{'cov:' :>9}{'mut:' :>9}{'frq/%:' :>9}", end="")
print()

for sam, amplicons in table.items():
    print(f"{sam :>{l}} ", end="")

    for (
        ampname
    ) in (
        amplicon_nfo
    ):  # instead of `ampname,amp in amplicons.items():`, to keep order consistent with column titles.
        amp = amplicons[ampname]

        # get topmost
        sites_cnt_l = -1
        sites_cnt = 0
        if amp["sites"]:  # empty ?
            (sites_cnt_l, sites_cnt) = list(amp["sites"].items())[-1]
        muts_cnt_l = -1
        muts_cnt = 0
        if amp["muts"]:  # empty ?
            (muts_cnt_l, muts_cnt) = list(amp["muts"].items())[-1]

        # pretty print
        if sites_cnt:
            print(f"{sites_cnt :>9}", end="")
            if muts_cnt:
                if muts_cnt_l != sites_cnt_l:
                    print(
                        f"\x1b[33;1m{muts_cnt :>9}{f'({muts_cnt_l}/{sites_cnt_l})' :>9}\x1b[0m",
                        end="",
                    )
                else:
                    print(
                        f"\x1b[32;1m{muts_cnt :>9}{100*muts_cnt/sites_cnt :7.2f}%{sites_cnt_l}\x1b[0m",
                        end="",
                    )
            else:
                print(f"\x1b[31;1m{'N/A' :>9}{'N/A' :>9}\x1b[0m", end="")
        else:
            print(f"\x1b[35;1m{'N/A' :>9}{'N/A' :>9}{'N/A' :>9}\x1b[0m", end="")

    print()

#!/usr/bin/env python3
import os
import argparse
import json
import yaml

import click


@click.command(
    help="Print coloured pretty table on terminal",
    epilog="See cooc-pubmut for a CSV file that can be imported into an article",
)
@click.option(
    "-a",
    "--amplicons",
    "amp",
    metavar="YAML",
    required=True,
    type=str,
    help="list of query amplicons, from mutbamscan",
)
# TODO: add mutually exclusive group
@click.option(
    "-j",
    "--json",
    "json_fname",
    metavar="JSON",
    type=str,
    help="results generated by mutbamscan",
)
@click.option(
    "-y",
    "--yaml",
    "yaml_fname",
    metavar="YAML",
    type=str,
    help="results generated by mutbamscan",
)
def cooc_colourmut(amp, json_fname, yaml_fname):
    # load table
    table = {}

    if json_fname:
        assert os.path.isfile(json_fname), f"cannot find result json file {json_fname}"
        with open(json_fname, "rt") as jf:
            table = json.load(fp=jf)
    elif yaml_fname:
        assert os.path.isfile(yaml_fname), f"cannot find result yaml file {yaml_fname}"
        with open(yaml_fname, "rt") as yf:
            table = yaml.safe_load(yf)

    assert len(table) > 0, "cannot succesfully load table"

    # reuse stored amplicons
    amplicon_nfo = {}

    assert os.path.isfile(amp), f"cannot find amplicon file yaml file {amp}"
    with open(amp, "rt") as yf:
        amp_str = yaml.safe_load(yf)

    amplicon_nfo = {
        a: ",".join(
            [
                f"{p}{b}"
                if len(b) == 1
                else (
                    f"\u0394{p}-{p + len(b) - 1}"
                    if b == "-" * len(b)
                    else f"{p}\u2192{b}"
                )
                for p, b in aqu[4].items()
            ]
        )
        for a, aqu in amp_str.items()
    }

    #
    # pretty print
    #

    l = max(len(k) for k in table)
    print(f"{'':<{l}} ", end="")
    for a in amplicon_nfo:
        print(f" {a :<26}", end="")
    print(f"\n{'':<{l}}  ", end="")
    for a, label in amplicon_nfo.items():
        print(
            f"{label if len(label)<=27 else (label[:26]+chr(0x2026)) :<27.27}", end=""
        )
    print(f"\n{'sample:':<{l}} ", end="")
    for a in amplicon_nfo:
        print(f"{'cov:' :>9}{'mut:' :>9}{'frq/%:' :>9}", end="")
    print()

    for sam, amplicons in table.items():
        print(f"{sam :>{l}} ", end="")

        for (
            ampname
        ) in (
            amplicon_nfo
        ):  # instead of `ampname,amp in amplicons.items():`, to keep order consistent with column titles.
            amp = amplicons[ampname]

            # get topmost
            sites_cnt_l = -1
            sites_cnt = 0
            if amp["sites"]:  # empty ?
                (sites_cnt_l, sites_cnt) = list(amp["sites"].items())[-1]
            muts_cnt_l = -1
            muts_cnt = 0
            if amp["muts"]:  # empty ?
                (muts_cnt_l, muts_cnt) = list(amp["muts"].items())[-1]

            # pretty print
            if sites_cnt:
                print(f"{sites_cnt :>9}", end="")
                if muts_cnt:
                    if muts_cnt_l != sites_cnt_l:
                        print(
                            f"\x1b[33;1m{muts_cnt :>9}{f'({muts_cnt_l}/{sites_cnt_l})' :>9}\x1b[0m",
                            end="",
                        )
                    else:
                        print(
                            f"\x1b[32;1m{muts_cnt :>9}{100*muts_cnt/sites_cnt :7.2f}%{sites_cnt_l}\x1b[0m",
                            end="",
                        )
                else:
                    print(f"\x1b[31;1m{'N/A' :>9}{'N/A' :>9}\x1b[0m", end="")
            else:
                print(f"\x1b[35;1m{'N/A' :>9}{'N/A' :>9}{'N/A' :>9}\x1b[0m", end="")

        print()


if __name__ == "__main__":
    cooc_colourmut()

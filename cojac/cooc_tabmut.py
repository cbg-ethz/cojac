#!/usr/bin/env python3
import numpy as np
import pandas as pd
import os

# import re
import argparse
import csv
import json
import yaml
import gzip

import click


@click.command(help="Make a table suitable for further processing: RStudio, etc")
# TODO: create mutually exclusive options
@click.option(
    "-j",
    "--json",
    "json_fname",
    metavar="JSON",
    type=str,
    help="results generated by mutbamscan",
)
@click.option(
    "-y",
    "--yaml",
    "yaml_fname",
    metavar="YAML",
    type=str,
    help="results generated by mutbamscan",
)
@click.option(
    "--batchname",
    metavar="SEP",
    required=False,
    default=None,
    type=str,
    help="separator used to split samplename/batchname in separate column",
)
@click.option(
    "-o",
    "--output",
    "csv_fname",
    metavar="CSV",
    required=False,
    default="scanned_table.csv",
    type=str,
    help="name of (raw) csv file to save the table into",
)
@click.option(
    "-l",
    "--lines",
    is_flag=True,
    default=False,
    help="Line-oriented table alternative",
)
@click.option(
    "-x",
    "--excel",
    "semi",
    is_flag=True,
    default=False,
    help="use a semi-colon ';' instead of a comma ',' in the comma-separated-files as required by Microsoft Excel",
)
@click.option(
    "-m",
    "--multiindex",
    is_flag=True,
    default=False,
    help="Use multi-level indexing (amplicons and counts categories)",
)
@click.option(
    "-a",
    "--add-mutations",
    "--am",
    "amp",
    metavar="YAML",
    required=False,
    default=None,
    type=str,
    help="add mutations descriptions using list of query amplicons, from mutbamscan",
)
@click.option(
    "-q",
    "--quiet",
    is_flag=True,
    default=False,
    help="Run quietly: do not print the table",
)
def cooc_tabmut(
    json_fname, yaml_fname, batchname, csv_fname, lines, semi, multiindex, amp, quiet
):
    # load amplicons
    amplicon_nfo = {}
    if amp:
        assert os.path.isfile(amp), f"cannot find amplicon file yaml file {amp}"
        with open(amp, "rt") as yf:
            amp_str = yaml.safe_load(yf)

        amplicon_nfo = {
            a: "|".join(
                [
                    # Mutations
                    ",".join(
                        [
                            (
                                f"{p}{b}"
                                if len(b) == 1
                                else (
                                    f"d{p}-{p + len(b) - 1}"
                                    if b == "-" * len(b)
                                    else f"{p}>{b}"
                                )
                            )
                            for p, b in aqu[4].items()
                        ]
                    ),
                    # Genomic position span
                    # f"[{aqu[0]}-{aqu[1]}]",
                    # Amplicon number
                    # f"Amp{a.split('_')[0]}",
                ]
            )
            for a, aqu in amp_str.items()
        }
        # print(amplicon_nfo)

    # load table
    table = {}

    assert not (
        semi and csv_fname.rfind(".tsv") != -1
    ), f"Excel cannot use TSV files {csv_fname}"

    if json_fname:
        assert os.path.isfile(json_fname), f"cannot find result json file {json_fname}"
        with open(json_fname, "rt") as jf:
            table = json.load(fp=jf)
    elif yaml_fname:
        assert os.path.isfile(yaml_fname), f"cannot find result json file {yaml_fname}"
        with open(yaml_fname, "rt") as yf:
            table = yaml.safe_load(yf)

    assert len(table) > 0, "cannot succesfully load table"

    #
    # tabluar output for down-stream processing
    #

    if lines:
        df_list = []
    else:
        df_dict = {}
    batch = None
    for sam, amplicons in table.items():
        ksam = None
        if batchname:
            (sam, ignore, batch) = sam.rpartition(batchname)
            ksam = (sam, batch) if sam and batch else sam or batch
            if not sam:
                sam = batch
                batch = None
        else:
            ksam = sam
        if (not lines) and (ksam not in df_dict):
            df_dict[ksam] = {}
        print(sam)

        for ampname, amp in amplicons.items():
            # get topmost
            sites_cnt_l = -1
            sites_cnt = 0
            if amp["sites"]:  # empty ?
                (sites_cnt_l, sites_cnt) = list(amp["sites"].items())[-1]
            muts_cnt_l = -1
            muts_cnt = 0
            mut_oneless = 0
            if amp["muts"]:  # empty ?
                # (muts_cnt_l,muts_cnt)=list(amp['muts'].items())[-1]
                # if int(muts_cnt_l) < int(sites_cnt_l):
                # muts_cnt = 0
                for l, cnt in amp["muts"].items():
                    if int(l) < 1:
                        continue
                    elif int(sites_cnt_l) == int(l):
                        muts_cnt = int(cnt)
                    elif int(sites_cnt_l) - 1 == int(l):
                        mut_oneless = cnt

            # pack into dict for pandas
            if lines:
                namelist = ampname.split("_")
                anum = namelist.pop(0)
                line = {"sample": sam}
                if batch:
                    line.update({"batch": batch})
                if ampname in amplicon_nfo:
                    line.update({"mutations": amplicon_nfo[ampname]})
                line.update(
                    {
                        "amplicon": anum,
                        "frac": (
                            (float(muts_cnt) / float(sites_cnt))
                            if sites_cnt
                            else float("nan")
                        ),
                        "cooc": (sites_cnt_l if int(sites_cnt_l) > 0 else ""),
                        "count": sites_cnt,
                        "mut_all": muts_cnt,
                        "mut_oneless": mut_oneless,
                    }
                )
                line.update({v: int(1) for v in namelist})
                df_list += [line]
            else:
                ampcol = f"A{ampname}"
                df_dict[ksam].update(
                    {
                        (ampcol, "count"): sites_cnt,
                        (ampcol, "mut_all"): muts_cnt,
                        (ampcol, "mut_oneless"): mut_oneless,
                        (ampcol, "frac"): (
                            (float(muts_cnt) / float(sites_cnt))
                            if sites_cnt
                            else float("nan")
                        ),
                        (ampcol, "cooc"): (sites_cnt_l if int(sites_cnt_l) > 0 else ""),
                    }
                )

    if lines:
        rstudio_table_df = pd.DataFrame.from_records(data=df_list)
    else:
        rstudio_table_df = pd.DataFrame.from_dict(data=df_dict, orient="index")
        if not multiindex:
            rstudio_table_df.columns = rstudio_table_df.columns.map(
                "{0[0]}.{0[1]}".format
            )  # , inplace=True)
    # rstudio_table_df.index.rename('sample', inplace=True)

    if not quiet:
        with pd.option_context(
            "display.max_rows", None
        ):  # , 'display.max_columns', None):
            print(rstudio_table_df)
    rstudio_table_df.to_csv(
        csv_fname,
        quoting=csv.QUOTE_MINIMAL,
        sep=("\t" if csv_fname.rfind(".tsv") != -1 else ";" if semi else ","),
        compression={"method": "infer"},
        index=(not lines),
    )


if __name__ == "__main__":
    cooc_tabmut()

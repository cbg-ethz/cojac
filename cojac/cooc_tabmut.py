#!/usr/bin/env python3
import numpy as np
import pandas as pd
import os

# import re
import argparse
import csv
import json
import yaml
import gzip


def main():
    # parse command line
    argparser = argparse.ArgumentParser(
        description="make a table suitable for further processing: RStudio, etc.",
        epilog="",
    )
    inputgroup = argparser.add_mutually_exclusive_group(required=True)
    inputgroup.add_argument(
        "-j",
        "--json",
        metavar="JSON",
        type=str,
        dest="json",
        help="results generated by mutbamscan",
    )
    inputgroup.add_argument(
        "-y",
        "--yaml",
        metavar="YAML",
        type=str,
        dest="yaml",
        help="results generated by mutbamscan",
    )
    argparser.add_argument(
        "-/",
        "--batchname",
        nargs="?",
        const="/",
        default=None,
        dest="batchname",
        help="split samplename/batchname (as in samples tsv)",
    )
    argparser.add_argument(
        "-o",
        "--output",
        metavar="CSV",
        required=False,
        default="scanned_table.csv",
        type=str,
        dest="csv",
        help="name of (pretty) csv file to save the table into",
    )
    argparser.add_argument(
        "-l",
        "--lines",
        action="store_true",
        dest="lines",
        help="Line-oriented table alternative",
    )
    argparser.add_argument(
        "-x",
        "--excel",
        action="store_true",
        dest="semi",
        help="use a semi-colon ';' instead of a comma ',' in the comma-separated-files as required by Microsoft Excel",
    )
    argparser.add_argument(
        "-m",
        "--multiindex",
        action="store_true",
        dest="multiindex",
        help="Use multi-level indexing (amplicons and counts categories)",
    )
    argparser.add_argument(
        "-q",
        "--quiet",
        action="store_true",
        dest="quiet",
        help="Run quietly: do not print the table",
    )
    args = argparser.parse_args()

    # load table
    table = {}

    assert not (
        args.semi and args.csv.rfind(".tsv") != -1
    ), f"Excel cannot use TSV files {args.csv}"

    if args.json:
        assert os.path.isfile(args.json), f"cannot find result json file {args.json}"
        with open(args.json, "rt") as jf:
            table = json.load(fp=jf)
    elif args.yaml:
        assert os.path.isfile(args.yaml), f"cannot find result json file {args.yaml}"
        with open(args.yaml, "rt") as yf:
            table = yaml.safe_load(yf)

    assert len(table) > 0, "cannot succesfully load table"

    #
    # pretty output for article
    #

    if args.lines:
        df_list = []
    else:
        df_dict = {}
    batch = None
    for sam, amplicons in table.items():
        ksam = None
        if args.batchname:
            (sam, ignore, batch) = sam.rpartition(args.batchname)
            ksam = (sam, batch)
        else:
            ksam = sam
        if (not args.lines) and (ksam not in df_dict):
            df_dict[ksam] = {}
        print(sam)

        for ampname, amp in amplicons.items():
            # get topmost
            sites_cnt_l = -1
            sites_cnt = 0
            if amp["sites"]:  # empty ?
                (sites_cnt_l, sites_cnt) = list(amp["sites"].items())[-1]
            muts_cnt_l = -1
            muts_cnt = 0
            mut_oneless = 0
            if amp["muts"]:  # empty ?
                # (muts_cnt_l,muts_cnt)=list(amp['muts'].items())[-1]
                # if int(muts_cnt_l) < int(sites_cnt_l):
                # muts_cnt = 0
                for l, cnt in amp["muts"].items():
                    if int(l) < 1:
                        continue
                    elif int(sites_cnt_l) == int(l):
                        muts_cnt = int(cnt)
                    elif int(sites_cnt_l) - 1 == int(l):
                        mut_oneless = cnt

            # pack into dict for pandas
            if args.lines:
                namelist = ampname.split("_")
                anum = namelist.pop(0)
                line = {"sample": sam}
                if batch:
                    line.update({"batch": batch})
                line.update(
                    {
                        "amplicon": anum,
                        "frac": (float(muts_cnt) / float(sites_cnt))
                        if sites_cnt
                        else float("nan"),
                        "cooc": (sites_cnt_l if int(sites_cnt_l) > 0 else ""),
                        "count": sites_cnt,
                        "mut_all": muts_cnt,
                        "mut_oneless": mut_oneless,
                    }
                )
                line.update({v: int(1) for v in namelist})
                df_list += [line]
            else:
                ampcol = f"A{ampname}"
                df_dict[ksam].update(
                    {
                        (ampcol, "count"): sites_cnt,
                        (ampcol, "mut_all"): muts_cnt,
                        (ampcol, "mut_oneless"): mut_oneless,
                        (ampcol, "frac"): (float(muts_cnt) / float(sites_cnt))
                        if sites_cnt
                        else float("nan"),
                        (ampcol, "cooc"): (sites_cnt_l if int(sites_cnt_l) > 0 else ""),
                    }
                )

    if args.lines:
        rstudio_table_df = pd.DataFrame.from_records(data=df_list)
    else:
        rstudio_table_df = pd.DataFrame.from_dict(data=df_dict, orient="index")
        if not args.multiindex:
            rstudio_table_df.columns = rstudio_table_df.columns.map(
                "{0[0]}.{0[1]}".format
            )  # , inplace=True)
    # rstudio_table_df.index.rename('sample', inplace=True)

    # TODO rename column with pretty names. (like in colourmut)
    if not args.quiet:
        with pd.option_context(
            "display.max_rows", None
        ):  # , 'display.max_columns', None):
            print(rstudio_table_df)
    rstudio_table_df.to_csv(
        args.csv,
        quoting=csv.QUOTE_MINIMAL,
        sep=("\t" if args.csv.rfind(".tsv") != -1 else ";" if args.semi else ","),
        compression={"method": "infer"},
        index=(not args.lines),
    )


if __name__ == "__main__":
    main()
